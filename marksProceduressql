CREATE OR REPLACE PACKAGE types
AS
    TYPE ref_cursor IS REF CURSOR;
END;
/
CREATE OR REPLACE FUNCTION SELECT_MARKS
RETURN types.ref_cursor
AS
    marks_cursor types.ref_cursor;
BEGIN
    OPEN marks_cursor FOR
        SELECT m.ID, m.STUDENT_ID, m.SUBJECT_ID, m.TEACHER_ID, m.MARK_VALUE, m.MARK_DATE
        FROM MARKS m;
    RETURN marks_cursor;
END;
/
CREATE OR REPLACE FUNCTION SELECT_MARK (
    MARK_ID INTEGER
)
RETURN types.ref_cursor
AS
    marks_cursor types.ref_cursor;
BEGIN
    OPEN marks_cursor FOR
        SELECT m.STUDENT_ID, std.LAST_NAME || ' ' || std.FIRST_NAME || ' ' || std.PATHER_NAME AS "STUDENT_NAME",
            m.SUBJECT_ID, s.SUBJECT_NAME
            m.TEACHER_ID, tch.LAST_NAME || ' ' || tch.FIRST_NAME || ' ' || tch.PATHER_NAME AS "TEACHER_NAME",
            m.MARK_VALUE, m.MARK_DATE
        FROM MARKS m
        JOIN PEOPLE std ON m.STUDENT_ID = std.PEOPLE_ID
        JOIN PEOPLE tch ON m.TEACHER_ID = tch.PEOPLE_ID
        JOIN SUBJECTS s ON s.SUBJECT_ID = m.SUBJECT_ID
        WHERE m.ID = MARK_ID;
    RETURN marks_cursor;
END;
/
CREATE OR REPLACE FUNCTION SELECT_COMBO_STUDENTS
RETURN types.ref_cursor
AS
    students_cursor types.ref_cursor;
BEGIN
    OPEN students_cursor FOR
        SELECT p.LAST_NAME || ' ' || p.FIRST_NAME || ' ' || p.PATHER_NAME AS "STUDENT_NAME",
            p.PEOPLE_ID AS "STUDENT_ID"
        FROM PEOPLE p
        WHERE p.PEOPLE_TYPE = 'S';
    RETURN students_cursor;
END;
/
CREATE OR REPLACE FUNCTION SELECT_COMBO_TEACHERS
RETURN types.ref_cursor
AS
    teachers_cursor types.ref_cursor;
BEGIN
    OPEN teachers_cursor FOR
        SELECT p.LAST_NAME || ' ' || p.FIRST_NAME || ' ' || p.PATHER_NAME AS "TEACHER_NAME",
            p.PEOPLE_ID AS "TEACHER_ID"
        FROM PEOPLE p
        WHERE p.PEOPLE_TYPE = 'T';
    RETURN teachers_cursor;
END;
/
CREATE OR REPLACE FUNCTION SELECT_COMBO_SUBJECTS
RETURN types.ref_cursor
AS
    subjects_cursor types.ref_cursor;
BEGIN
    OPEN subjects_cursor FOR
        SELECT s.SUBJECT_NAME,s.SUBJECT_ID
        FROM SUBJECTS s;
    RETURN subjects_cursor;
END;
/